> let scaledBy p (sx,sy) = p `At` (X/sx, Y/sy)
> let translatedBy p (dx,dy) = p `At` (X-dx, Y-dy)
> let minOf p1 p2 = (p1 `Leq` p2) * p1 + (p2 `Lt` p1) * p2

> let rightMustache = ((R + X) `At` (0.5*Phi,R)) `translatedBy` (1,0.6)
> let leftMustache = rightMustache `scaledBy` (-1,1)
> let mustache = minOf leftMustache rightMustache
> renderPan $ mustache `scaledBy` (0.5, 0.5)
*****************************************
*****************************************
*****************************************
*****************************************
*****************************************
******+++++*******************+++++******
****++++++++*****************++++++++****
***+++++...*******************...+++++***
***+++++.......+++++++++++.......+++++***
***+++++++...+++++++++++++++...+++++++***
****++++++++++++++++*++++++++++++++++****
******+++++++++++*******+++++++++++******
*****************************************
*****************************************
*****************************************
*****************************************
*****************************************
*****************************************
*****************************************
*****************************************
*****************************************




































































